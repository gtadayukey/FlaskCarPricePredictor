import base64
import io
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

from FlaskCarPricePredictorMVC.services.math_services import linear_regression
from FlaskCarPricePredictorMVC.services.math_services import variation_tendency
from FlaskCarPricePredictorMVC.utils.pesquisas_db import retornar_para_plot


def plot_unitario(marca, modelo, ano_modelo):
    dados = retornar_para_plot(marca, modelo, ano_modelo)

    df = pd.DataFrame(dados, columns=['modelo', 'mes_referencia', 'preco_medio'])

    x = df['mes_referencia']
    y = df['preco_medio']

    xreg = np.arange(len(x))

    # model = LinearRegression().fit(xreg.reshape(-1, 1), y)
    # print(model.coef_)
    # print(model.intercept_)

    coeficiente_angular, coeficiente_linear = linear_regression(y)
    print(coeficiente_angular, coeficiente_linear)

    plt.figure(figsize=(10, 6))
    plt.scatter(xreg, y, color='blue', label='Dados Reais')
    plt.plot(xreg, coeficiente_angular * xreg + coeficiente_linear, color='red', label='Linha de Regressão')
    plt.xlabel('Meses do ano')
    plt.ylabel('Preço Total')
    plt.title('Regressão Linear de Preços medios por mês')
    plt.legend()
    plt.gcf().autofmt_xdate()

    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    image_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')

    tendencia_porcentagem = variation_tendency(coeficiente_linear, coeficiente_angular, xreg)

    return image_base64, dataFrame, tendencia_porcentagem

-----------------------------------------------------------------------------------------------------------------------


import pandas as pd

from FlaskCarPricePredictorMVC.data.connect import db

def retornar_anos_modelo(modelo_carro):
    connection = db.connection()
    cursor = connection.cursor()

    query = (f"SELECT ano_modelo "
             f"FROM carros_fipe "
             f"WHERE modelo = '{modelo_carro}' GROUP BY ano_modelo")
    cursor.execute(query)
    dados = cursor.fetchall()

    df = pd.DataFrame(dados, columns=['ano_modelo'])

    cursor.close()
    connection.close()

    json_result = df.to_json(orient='index')

    return json_result


def retornar_modelos():
    connection = db.connection()
    cursor = connection.cursor()

    query = (f"SELECT modelo "
             f"FROM carros_fipe "
             f"GROUP BY modelo")
    cursor.execute(query)
    dados = cursor.fetchall()

    df = pd.DataFrame(dados, columns=['modelo'])

    cursor.close()
    connection.close()

    json_result = df.to_json(orient='index')

    return json_result


def retornar_para_plot(marca, modelo, ano_modelo):
    connection = db.connection()
    cursor = connection.cursor()

    query = (f"SELECT DISTINCT c.modelo, c.mes_referencia, c.preco_medio "
             f"FROM carros_fipe c "
             f"WHERE c.marca = '{marca}' AND c.modelo = '{modelo}' AND c.ano_modelo = '{ano_modelo}'"
             f"ORDER BY mes_referencia")
    cursor.execute(query)
    dados = cursor.fetchall()

    cursor.close()
    connection.close()
    return dados


--------------------------------------------------------------------------------------------------------------


@app.route('/index')
def index():
    return render_template('index.html')


@app.route('/processar_login', methods=["POST"])
def processar_login():
    email_recebido = request.form["email_login"]
    senha_recebida = request.form["senha_login"]

    validar_login(email_recebido, senha_recebida)

    return redirect(url_for('index'))


@app.route('/processar_cadastro', methods=["POST"])
def processar_cadastro():
    nome_recebido = request.form["nome_cadastro"]
    sobrenome_recebido = request.form["sobrenome_cadastro"]
    email_recebido = request.form["email_cadastro"]
    senha_recebida1 = request.form["senha_cadastro1"]
    senha_recebida2 = request.form["senha_cadastro2"]

    erro_cadastro = validar_cadastro(nome_recebido, sobrenome_recebido, email_recebido, senha_recebida1,
                                     senha_recebida2)

    return redirect(url_for('index'))


@app.route('/cadastro')
def cadastro():
    return render_template('register.html')


@app.route('/analiseUnitaria')
def carregar_analise_unitaria():
    modelos_json = retornar_modelos()
    modelos_json = json.loads(modelos_json)
    modelos = [v['modelo'] for v in modelos_json.values()]
    # modelos = modelos_json['modelo']
    return render_template('unitary.html', modelos=modelos)


@app.route('/analisar', methods=['POST'])
def analisar():
    marca = 'Fiat'
    modelo = request.form['modelo']
    ano_modelo = request.form['ano_modelo']
    print(f'marca: {marca}, modelo:{modelo}, ano_modelo:{ano_modelo}')
    image_base64, df, tendencia_porcentagem = plot_unitario(marca, modelo, ano_modelo)
    previsao, preco_final = average_variation(df)
    return render_template('data_display.html',
                           image_base64=image_base64,
                           previsao=previsao,
                           preco_final=preco_final,
                           tendencia_porcentagem=tendencia_porcentagem)


@app.route('/analiseComparativa')
def carregar_analise_comparativa():
    return render_template('comparative.html')


@app.route('/pesquisar_ano_modelo', methods=['GET'])
def pesquisar_ano_modelo():
    modelo_carro = request.args.get('modelo')
    res = retornar_anos_modelo(modelo_carro)
    res = json.loads(res)
    anos_modelo = [v['ano_modelo'] for v in res.values()]

    return jsonify(anos_modelo)